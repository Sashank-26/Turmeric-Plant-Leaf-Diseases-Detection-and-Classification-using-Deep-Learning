import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os



import keras

from keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img
from keras.applications.vgg16 import VGG16,preprocess_input,decode_predictions
train_datagen = ImageDataGenerator(zoom_range=0.5,shear_range=0.3,horizontal_flip= True,preprocessing_function=preprocess_input)

val_datagen=ImageDataGenerator(preprocessing_function=preprocess_input)
train = train_datagen.flow_from_directory(directory="/content/drive/MyDrive/archive/PLD_3_Classes_256/Training",target_size=(256,256),batch_size=25)
val = train_datagen.flow_from_directory(directory="/content/drive/MyDrive/archive/PLD_3_Classes_256/Validation",target_size=(256,256),batch_size=25)
t_img,label=train.next()
def plotimage(img_arr,label):

 for im,l in zip(img_arr,label):
   plt.figure(figsize=(3,3))
   plt.imshow(im)
   plt.show()
plotimage(t_img[:10],label[:10])
from keras.layers import Dense,Flatten
from keras.models import Model
from keras.applications.vgg16 import VGG16
import keras
base_model = VGG16(input_shape=(256,256,3),include_top= False)
for layer in base_model.layers:
  layer.trainable = False
base_model.summary()
X= Flatten()(base_model.output)

X= Dense(units=3,activation='softmax')(X)


#creating our own model
model = Model(base_model.input, X)
model.summary()
model.compile(optimizer='adam',loss=keras.losses.categorical_crossentropy,metrics=['accuracy'])
from keras.callbacks import ModelCheckpoint,EarlyStopping

#early stopping
es = EarlyStopping(monitor='val_accuracy',min_delta=0.01,patience=3,verbose=1)
#mcp
mc =ModelCheckpoint(filepath="best_model.h5",
                    monitor='val_accuracy',
                    min_delta=0.01,
                    patience=3,
                    verbose=1,
                    save_best_only= True)


cb=[es,mc]
history=model.fit_generator(train,
                        steps_per_epoch=2,
                        epochs=5,
                        verbose=1,
                        callbacks=cb,
                        validation_data=val,
                        validation_steps=2)
h=history.history
h.keys()
plt.plot(h['accuracy'])
plt.plot(h['val_accuracy'],c="red")
plt.title("accuracy vs validation accuracy VGG16")
plt.show()
plt.plot(h['loss'])
plt.plot(h['val_loss'],c="red")
plt.title("loss vs validation loss  VGG16")
plt.show()
from keras.models import load_model

model = load_model("/content/best_model.h5")
acc=model.evaluate_generator(val)[1]

print(f"The accuracy of the model is {acc*100}%")
ref = dict(zip(list(train.class_indices.values()),list(train.class_indices.keys())))
def prediction(path):
  img=load_img(path,target_size=(256,256))
  i=img_to_array(img)
  im=preprocess_input(i)
  img=np.expand_dims(im,axis=0)
  pred=np.argmax(model.predict(img))
  print(f"The Disease is {ref[pred]} ")
TEST_image=input()
path=TEST_image
prediction(path)
print(h['loss'])
